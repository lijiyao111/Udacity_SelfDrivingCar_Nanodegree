Udaicyt CarND MPC project

Jiyao Li

1. Describe model and state

States are [x (vehicle position x), y (vehicle position y), psi (vehicle heading), v (vehicle velocity), cte (cross track error), epsi (heading error)]

Actuation are delta (steering angle), a (acceleration)

Kinematic update model is:

```
 x_1 = x_0 + ( v_0 * cos(psi_0) * dt );
 y_1 = y_0 + ( v_0 * sin(psi_0) * dt );
 psi_1 = psi_0 - ( v_0 * delta_0 * dt / Lf );
 v_1 = v_0 + a_0 * dt;
 cte_1 = cte_0 + ( v_0 * sin(epsi_0) * dt );
 epsi_1 = epsi_0 - ( v_0 * delta_0 * dt / Lf );    
```
All the variable with suffix 1 is the state at time t + dt and all variables with suffix 0 is the state at time t.

2. Discussion on N and dt.

From the class we learned that:

The prediction horizon is the duration over which future predictions are made. Weâ€™ll refer to this as T. T is the product of two other variables, N and dt. N is the number of timesteps in the horizon. dt is how much time elapses between actuations.

T: Horizon
In the case of driving a car, T should be a few seconds, at most. Beyond that horizon, the environment will change enough that it won't make sense to predict any further into the future.

N: Number of Timesteps
Thus N determines the number of variables optimized by the MPC. This is also the major driver of computational cost.

dt: Timestep Duration
MPC attempts to approximate a continuous reference trajectory by means of discrete paths between actuations. Larger values of dt result in less frequent actuations, which makes it harder to accurately approximate a continuous reference trajectory. This is sometimes called "discretization error".

So ideally, we want large T and small dt. But this will lead to big N and heavy computation. After playing with different values, I just use N=10 and dt=0.1s.

3. Implemetation and other paramaters tuning:

For MPC, it is quite easy to simulate the actuator delay. Just predict the vehicle state after the delay, and then use that as the initial state for normal MPC. 

Since MPC is fundermantally a nonline optimization problem, and the overall cost function is a combination (weighted sum) of different individual cost function to minimize, the weight of each cost function determines how much constraint will be apply to each object. E.g. if large weight is applied for CTE constraint and little weight is applied to smoothness of the steering, then the optimization result will have jittering steering but better CTE.

After tuning these weight, here is what I found:

a. Giving different reference velocity, the optimal weights for each cost function will differ. For example, if speed increases, we need a smoother steering and throttle control.

b. Contraining a lot of CTE and epsi will cause lots of varying acturator actions. Acturator will change more frequently to ensure vehicle is following the trajectory.

c. smooth steering is more important than smooth throttle, especially when the reference speed increases. 

The set of weights I tuned gives smooth driving with max speed over 95 MPH. This is better than my manual driving in this simulation.  
